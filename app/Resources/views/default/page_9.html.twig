    {% extends 'base.html.twig' %}

    {% block body %}
        <div id="wrapper">
            <div id="container">
                <div id="DIV_1">
                    <h1 id="H1_2">
                        Enquête de satisfaction
                    </h1>
                    <div id="content_first" class="clearfix">
                        <form name="presta" method="post" id="myForm">
                        <h2> Par quels moyens préférez-vous recevoir les informations ?</h2>
                        <h4>Clicquez et déplacez l'élément dans l'ordre de préférence du plus haut celui qui vous intéresse le plus au plus bas celui qui vous intéresse le moins.</h4>
                            <ul id="sortable">
                                <li id="1" onmousedown="my_id();" class="ui-state-default">Le site internet</li>
                                <li id="2" onmousedown="my_id();" class="ui-state-default">La newsletter</li>
                                <li id="3" onmousedown="my_id();" class="ui-state-default">La page Facebook</li>
                                <li id="4" onmousedown="my_id();" class="ui-state-default">Le Mag'Ce</li>
                                <li id="5" onmousedown="my_id();" class="ui-state-default">La lettre CE Mensuelle</li>
                                <li id="6" onmousedown="my_id();" class="ui-state-default">Plaquettes CE (Billeterie, Guide Bon Plans...)</li>
                                <li id="7" onmousedown="my_id();" class="ui-state-default">Affichages</li>
                                <li id="8" onmousedown="my_id();" class="ui-state-default">Infos par les élus syndicaux</li>
                                <li id="9" onmousedown="my_id();" class="ui-state-default">Infos par le personnel CE</li>
                                <li id="10" onmousedown="my_id();" class="ui-state-default">Ecran dans le hall d'accueil</li>
                            </ul>
                            <input name="input_1" type="hidden" value="" id="input_1">
                            <input name="input_2" type="hidden" value="" id="input_2">
                            <input name="input_3" type="hidden" value="" id="input_3">
                            <input name="input_4" type="hidden" value="" id="input_4">
                            <input name="input_5" type="hidden" value="" id="input_5">
                            <input name="input_6" type="hidden" value="" id="input_6">
                            <input name="input_7" type="hidden" value="" id="input_7">
                            <input name="input_8" type="hidden" value="" id="input_8">
                            <input name="input_9" type="hidden" value="" id="input_9">
                            <input name="input_10" type="hidden" value="" id="input_10">
                        <input class="btn" type="submit" value="Suivant" name="submit2">
                        </form>
                    </div>
                </div>
            </div>
        </div>

    {% endblock %}

    {% block stylesheets %}
        <style>
            .btn {
                border: none;
                padding: 10px;
                color: white;
                margin-top: 35px;
                float: right;
                border-radius: 5px;
            }
            #sortable { list-style-type: none; margin: 0; padding: 0; width: 60%; }
            #sortable li { margin: 0 5px 5px 5px; padding: 5px; font-size: 1.2em; height: 1.5em; }
            html>body #sortable li { height: 1.5em; line-height: 1.2em;    border: 1px solid #1197d0; }
            html>body #sortable li:hover { color:white; background:#1197d0;  }
            .ui-state-highlight { height: 1.5em; line-height: 1.2em; }
        </style>
    {% endblock %}

    {% block javascripts %}

        <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        <script type="text/javascript">
            /*!
             * jQuery UI Touch Punch 0.2.3
             *
             * Copyright 2011–2014, Dave Furfero
             * Dual licensed under the MIT or GPL Version 2 licenses.
             *
             * Depends:
             *  jquery.ui.widget.js
             *  jquery.ui.mouse.js
             */
            (function ($) {

                // Detect touch support
                $.support.touch = 'ontouchend' in document;

                // Ignore browsers without touch support
                if (!$.support.touch) {
                    return;
                }

                var mouseProto = $.ui.mouse.prototype,
                    _mouseInit = mouseProto._mouseInit,
                    _mouseDestroy = mouseProto._mouseDestroy,
                    touchHandled;

                /**
                 * Simulate a mouse event based on a corresponding touch event
                 * @param {Object} event A touch event
                 * @param {String} simulatedType The corresponding mouse event
                 */
                function simulateMouseEvent (event, simulatedType) {

                    // Ignore multi-touch events
                    if (event.originalEvent.touches.length > 1) {
                        return;
                    }

                    event.preventDefault();

                    var touch = event.originalEvent.changedTouches[0],
                        simulatedEvent = document.createEvent('MouseEvents');

                    // Initialize the simulated mouse event using the touch event's coordinates
                    simulatedEvent.initMouseEvent(
                        simulatedType,    // type
                        true,             // bubbles
                        true,             // cancelable
                        window,           // view
                        1,                // detail
                        touch.screenX,    // screenX
                        touch.screenY,    // screenY
                        touch.clientX,    // clientX
                        touch.clientY,    // clientY
                        false,            // ctrlKey
                        false,            // altKey
                        false,            // shiftKey
                        false,            // metaKey
                        0,                // button
                        null              // relatedTarget
                    );

                    // Dispatch the simulated event to the target element
                    event.target.dispatchEvent(simulatedEvent);
                }

                /**
                 * Handle the jQuery UI widget's touchstart events
                 * @param {Object} event The widget element's touchstart event
                 */
                mouseProto._touchStart = function (event) {

                    var self = this;

                    // Ignore the event if another widget is already being handled
                    if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {
                        return;
                    }

                    // Set the flag to prevent other widgets from inheriting the touch event
                    touchHandled = true;

                    // Track movement to determine if interaction was a click
                    self._touchMoved = false;

                    // Simulate the mouseover event
                    simulateMouseEvent(event, 'mouseover');

                    // Simulate the mousemove event
                    simulateMouseEvent(event, 'mousemove');

                    // Simulate the mousedown event
                    simulateMouseEvent(event, 'mousedown');
                };

                /**
                 * Handle the jQuery UI widget's touchmove events
                 * @param {Object} event The document's touchmove event
                 */
                mouseProto._touchMove = function (event) {

                    // Ignore event if not handled
                    if (!touchHandled) {
                        return;
                    }

                    // Interaction was not a click
                    this._touchMoved = true;

                    // Simulate the mousemove event
                    simulateMouseEvent(event, 'mousemove');
                };

                /**
                 * Handle the jQuery UI widget's touchend events
                 * @param {Object} event The document's touchend event
                 */
                mouseProto._touchEnd = function (event) {

                    // Ignore event if not handled
                    if (!touchHandled) {
                        return;
                    }

                    // Simulate the mouseup event
                    simulateMouseEvent(event, 'mouseup');

                    // Simulate the mouseout event
                    simulateMouseEvent(event, 'mouseout');

                    // If the touch interaction did not move, it should trigger a click
                    if (!this._touchMoved) {

                        // Simulate the click event
                        simulateMouseEvent(event, 'click');
                    }

                    // Unset the flag to allow other widgets to inherit the touch event
                    touchHandled = false;
                };

                /**
                 * A duck punch of the $.ui.mouse _mouseInit method to support touch events.
                 * This method extends the widget with bound touch event handlers that
                 * translate touch events to mouse events and pass them to the widget's
                 * original mouse event handling methods.
                 */
                mouseProto._mouseInit = function () {

                    var self = this;

                    // Delegate the touch handlers to the widget's element
                    self.element.bind({
                        touchstart: $.proxy(self, '_touchStart'),
                        touchmove: $.proxy(self, '_touchMove'),
                        touchend: $.proxy(self, '_touchEnd')
                    });

                    // Call the original $.ui.mouse init method
                    _mouseInit.call(self);
                };

                /**
                 * Remove the touch event handlers
                 */
                mouseProto._mouseDestroy = function () {

                    var self = this;

                    // Delegate the touch handlers to the widget's element
                    self.element.unbind({
                        touchstart: $.proxy(self, '_touchStart'),
                        touchmove: $.proxy(self, '_touchMove'),
                        touchend: $.proxy(self, '_touchEnd')
                    });

                    // Call the original $.ui.mouse destroy method
                    _mouseDestroy.call(self);
                };

            })(jQuery);

            function my_id() {
                $('.btn').prop("disabled",false);
                $('.btn').css("background", "#1197d0");
               for(var i = 1 ; i<=10; i++){
                   $("#input_"+i).val($("ul#sortable li:nth-child("+i+")").attr("id"));
               }
            }

            $( function() {
                $( "#sortable" ).sortable({
                    placeholder: "ui-state-highlight"
                });
                $( "#sortable" ).disableSelection();
            } );
        </script>
    {% endblock %}


